using System;
using System.Collections.Generic;
using Lean.Touch;
using Mapbox.Examples;

namespace UnityEngine.XR.iOS
{
	public class UnityARHitTestExample : MonoBehaviour, PlaneAppearDetector
	{
		public Transform m_HitTransform;
		public float maxRayDistance = 30.0f;
		public LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer
		public CanvasController ccontroller;
		public UnityARGeneratePlane generate_script;

		public GameObject pointCloud;


		private bool mapWasShown = false;
		private bool planeAppeared = false;
		private GameObject planeObj;
		private SpawnOnMap spawnScript;


        bool HitTestWithResultType (ARPoint point, ARHitTestResultType resultTypes)
        {
            List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, resultTypes);
			if (hitResults.Count > 0 && !mapWasShown && planeAppeared ) {
				mapWasShown = true;

                foreach (var hitResult in hitResults) {
                    m_HitTransform.position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);
                    m_HitTransform.rotation = UnityARMatrixOps.GetRotation (hitResult.worldTransform);
					m_HitTransform.localScale = new Vector3 (0.08f, 0.08f, 0.08f);

					Transform map;
					for (int i = 0; i < m_HitTransform.childCount; i++) {
						map = m_HitTransform.GetChild (i);
						if (map.name == "Map") {
							spawnScript = map.GetComponent<SpawnOnMap> ();
//							map.GetComponent<Animator> ().Play ("MapAnimationScalerQQ");
//							map.GetComponent<Animator> ().Play ("none");
							showPins();
							switchCloud(false);
							m_HitTransform.gameObject.GetComponent<LeanScale>().enabled = true;

						}
					}
					generate_script.getManager ().HidePrefabs ();
						

 //                   Debug.Log (string.Format ("x:{0:0.######} y:{1:0.######} z:{2:0.######}", m_HitTransform.position.x, m_HitTransform.position.y, m_HitTransform.position.z));
					ccontroller.hide_about_map_text ();
					ccontroller.show_about_pins ();
					ccontroller.show_reload_btn ();
					ccontroller.show_screenShot_btn ();
					return true;
                }
            }
            return false;
        }
		
		// Update is called once per frame
		void Update () {
			#if UNITY_EDITOR   //we will only use this script on the editor side, though there is nothing that would prevent it from working on device
			if (Input.GetMouseButtonDown (0)) {
				Ray ray = Camera.main.ScreenPointToRay (Input.mousePosition);
				RaycastHit hit;
				
				//we'll try to hit one of the plane collider gameobjects that were generated by the plugin
				//effectively similar to calling HitTest with ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent
				if (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) {
					//we're going to get the position from the contact point
					m_HitTransform.position = hit.point;
//					Debug.Log (string.Format ("x:{0:0.######} y:{1:0.######} z:{2:0.######}", m_HitTransform.position.x, m_HitTransform.position.y, m_HitTransform.position.z));

					//and the rotation from the transform of the plane collider
					m_HitTransform.rotation = hit.transform.rotation;
				}
			}
			#else
			if (Input.touchCount > 0 && m_HitTransform != null)
			{
				var touch = Input.GetTouch(0);
				if (touch.phase == TouchPhase.Began || touch.phase == TouchPhase.Moved)
				{
					var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);
					ARPoint point = new ARPoint {
						x = screenPosition.x,
						y = screenPosition.y
					};

                    // prioritize reults types
                    ARHitTestResultType[] resultTypes = {
						//ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingGeometry,
                        ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent, 
                        // if you want to use infinite planes use this:
                        //ARHitTestResultType.ARHitTestResultTypeExistingPlane,
                        //ARHitTestResultType.ARHitTestResultTypeEstimatedHorizontalPlane, 
						//ARHitTestResultType.ARHitTestResultTypeEstimatedVerticalPlane, 
						//ARHitTestResultType.ARHitTestResultTypeFeaturePoint
                    }; 
					
                    foreach (ARHitTestResultType resultType in resultTypes)
                    {
                        if (HitTestWithResultType (point, resultType))
                        {
                            return;
                        }
                    }
				}
			}
			#endif

		}

		void PlaneAppearDetector.planeDetect(){
			planeAppeared = true;
		}

		public void reload_map(){
			mapWasShown = false;
			m_HitTransform.localScale = new Vector3 (0, 0, 0);
			for (int i = 0; i < m_HitTransform.childCount; i++) {
				Transform child = m_HitTransform.GetChild (i);
				if (child.name == "Map") {
					child.gameObject.SetActive (true);
				}
			}
			
			switchCloud(true);
			ccontroller.hide_back_Button ();
			ccontroller.hide_reload_btn ();
			ccontroller.hide_about_model ();
			ccontroller.hide_about_map_text ();
			ccontroller.hide_about_Isaac_info ();
			ccontroller.hide_info_btn ();
		}
			
		public void showPins(){
			spawnScript.showPinsOnMap ();
		}	

		private void switchCloud(bool value){
				UnityPointCloudExample cloud = pointCloud.GetComponent<UnityPointCloudExample>();
				cloud.setCloudWorks(false);
				List<GameObject> list = cloud.getCloud();
				foreach (GameObject ob in list){
				float v = value ? 0.002f : 0;
				ob.transform.localScale = new Vector3(v,v,v);
			}
		}
	}
}

